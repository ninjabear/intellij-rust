{
    parserClass='org.rust.lang.core.parser.RustParser'
    parserUtilClass="org.rust.lang.core.parser.RustParserUtil"

    implements='org.rust.lang.core.psi.RustCompositeElement'
    extends='org.rust.lang.core.psi.impl.RustCompositeElementImpl'

    elementTypeHolderClass='org.rust.lang.core.psi.RustCompositeElementTypes'

    elementTypeClass='org.rust.lang.core.psi.RustCompositeElementType'
    tokenTypeClass='org.rust.lang.core.psi.RustTokenType'

    psiClassPrefix='Rust'
    psiImplClassSuffix='Impl'
    psiPackage='org.rust.lang.core.psi'
    psiImplPackage='org.rust.lang.core.psi.impl'

    parserImports='static org.rust.lang.core.psi.RustTokenElementTypes.*'


    tokens = [
        LBRACE               =  '{'
        RBRACE               =  '}'
        LBRACK               =  '['
        RBRACK               =  ']'
        LPAREN               =  '('
        RPAREN               =  ')'
        COLON                =  ':'
        COLONCOLON           =  '::'
        SEMICOLON            =  ';'
        COMMA                =  ','
        EQ                   =  '='
        EXCLEQ               =  '!='
        EQEQ                 =  '=='
        SHA                  =  '#'
        EXCL                 =  '!'
        PLUSEQ               =  '+='
        PLUS                 =  '+'
        MINUSEQ              =  '-='
        MINUS                =  '-'
        OREQ                 =  '|='
        ANDAND               =  '&&'
        ANDEQ                =  '&='
        AND                  =  '&'
        OR                   =  '|'
        LT                   =  '<'
        XOREQ                =  '^='
        XOR                  =  '^'
        MULEQ                =  '*='
        MUL                  =  '*'
        DIVEQ                =  '/='
        DIV                  =  '/'
        REMEQ                =  '%='
        REM                  =  '%'
        GT                   =  '>'
        DOT                  =  '.'
        DOTDOT               =  '..'
        DOTDOTDOT            =  '...'
        FAT_ARROW            =  '=>'
        ARROW                =  '->'
        Q                    =  '?'
        AT                   =  '@'
        UNDERSCORE           =  '_'

        // DEBUG

        ABSTRACT  = 'abstract'
        ALIGNOF   = 'alignof'
        AS        = 'as'
        BECOME    = 'become'
        BOX       = 'box'
        BREAK     = 'break'
        CONST     = 'const'
        CONTINUE  = 'continue'
        CRATE     = 'crate'
        DO        = 'do'
        ELSE      = 'else'
        ENUM      = 'enum'
        EXTERN    = 'extern'
        FALSE     = 'false'
        FINAL     = 'final'
        FN        = 'fn'
        FOR       = 'for'
        IF        = 'if'
        IMPL      = 'impl'
        IN        = 'in'
        LET       = 'let'
        LOOP      = 'loop'
        MACRO     = 'macro'
        MATCH     = 'match'
        MOD       = 'mod'
        MOVE      = 'move'
        MUT       = 'mut'
        OFFSETOF  = 'offsetof'
        OVERRIDE  = 'override'
        PRIV      = 'priv'
        PROC      = 'proc'
        PUB       = 'pub'
        PURE      = 'pure'
        REF       = 'ref'
        RETURN    = 'return'
        CSELF     = 'Self'
        SELF      = 'self'
        SIZEOF    = 'sizeof'
        STATIC    = 'static'
        STRUCT    = 'struct'
        SUPER     = 'super'
        TRAIT     = 'trait'
        TRUE      = 'true'
        TYPE_KW   = 'type'
        TYPEOF    = 'typeof'
        UNSAFE    = 'unsafe'
        UNSIZED   = 'unsized'
        USE       = 'use'
        VIRTUAL   = 'virtual'
        WHERE     = 'where'
        WHILE     = 'while'
        YIELD     = 'yield'

        SHEBANG_LINE = '#!/bin/bash'

        // _DBG
        identifier  = 'regexp:\p{Alpha}\w*'
        space       = 'regexp:\s+'
    ]

    //
    // Mixins
    //

    mixin       ("trait_item") = "org.rust.lang.core.psi.impl.mixin.RustTraitItemImplMixin"
    mixin       ("impl_item")  = "org.rust.lang.core.psi.impl.mixin.RustImplItemImplMixin"
    mixin       ("struct_item") = "org.rust.lang.core.psi.impl.mixin.RustStructItemImplMixin"
    mixin       ("struct_decl_field") = "org.rust.lang.core.psi.impl.mixin.RustStructDeclFieldImplMixin"
    mixin       ("mod_decl_item") = "org.rust.lang.core.psi.impl.mixin.RustModDeclItemImplMixin"
    mixin       ("const_item") = "org.rust.lang.core.psi.impl.mixin.RustConstItemImplMixin"
    mixin       ("extern_crate_item") = "org.rust.lang.core.psi.impl.mixin.RustExternCrateItemImplMixin"
    mixin       ("foreign_mod_item") = "org.rust.lang.core.psi.impl.mixin.RustForeignModItemImplMixin"
    mixin       ("static_item") = "org.rust.lang.core.psi.impl.mixin.RustStaticItemImplMixin"
    mixin       ("type_item") = "org.rust.lang.core.psi.impl.mixin.RustTypeItemImplMixin"
    mixin       ("use_item") = "org.rust.lang.core.psi.impl.mixin.RustUseItemImplMixin"
    mixin       ("enum_variant")    = "org.rust.lang.core.psi.impl.mixin.RustEnumVariantImplMixin"
    mixin       ("impl_method_member") = "org.rust.lang.core.psi.impl.mixin.RustImplMethodMemberImplMixin"
    mixin       ("method_call_expr") = "org.rust.lang.core.psi.impl.mixin.RustMethodCallExprImplMixin"

    //
    // References
    //

    mixin       ("path") = "org.rust.lang.core.psi.impl.mixin.RustPathImplMixin"
    implements  ("path") = "org.rust.lang.core.psi.RustQualifiedReferenceElement"

    //
    // Resolve scopes
    //

    implements  ("mod_item") = [ "org.rust.lang.core.resolve.scope.RustResolveScope"
                                 "org.rust.lang.core.psi.RustMod"
                                 "org.rust.lang.core.psi.RustInnerAttributeOwner" ]
    mixin       ("mod_item") = "org.rust.lang.core.psi.impl.mixin.RustModItemImplMixin"

    implements  ("fn_item") = [ "org.rust.lang.core.resolve.scope.RustResolveScope"
                                "org.rust.lang.core.psi.RustGenericDeclaration"
                                "org.rust.lang.core.psi.RustInnerAttributeOwner" ]
    mixin       ("fn_item") = "org.rust.lang.core.psi.impl.mixin.RustFnItemImplMixin"

    implements  ("enum_item") = [ "org.rust.lang.core.resolve.scope.RustResolveScope"
                                  "org.rust.lang.core.psi.RustGenericDeclaration" ]
    mixin       ("enum_item") = "org.rust.lang.core.psi.impl.mixin.RustEnumItemImplMixin"

    implements  ("trait_method_member") = [ "org.rust.lang.core.resolve.scope.RustResolveScope"
                                            "org.rust.lang.core.psi.RustGenericDeclaration"
                                            "org.rust.lang.core.psi.RustInnerAttributeOwner" ]
    mixin       ("trait_method_member") = "org.rust.lang.core.psi.impl.mixin.RustTraitMethodMemberImplMixin"

    implements  ("lambda_expr") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("lambda_expr") = "org.rust.lang.core.psi.impl.mixin.RustLambdaExprImplMixin"

    implements  ("block") =  "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("block") =  "org.rust.lang.core.psi.impl.mixin.RustBlockImplMixin"

    implements  ("scoped_let_expr") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("scoped_let_expr") = "org.rust.lang.core.psi.impl.mixin.RustScopedLetExprImplMixin"

    implements  ("for_expr") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("for_expr") = "org.rust.lang.core.psi.impl.mixin.RustForExprImplMixin"

    implements  ("match_arm") = "org.rust.lang.core.resolve.scope.RustResolveScope"
    mixin       ("match_arm") = "org.rust.lang.core.psi.impl.mixin.RustMatchArmImplMixin"


    //
    // Declaring elements
    //

    implements  ("let_decl")    = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("let_decl")    = "org.rust.lang.core.psi.impl.mixin.RustLetDeclImplMixin"

    implements  ("scoped_let_decl") = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("scoped_let_decl") = "org.rust.lang.core.psi.impl.mixin.RustScopedLetDeclImplMixin"

    implements  ("scoped_for_decl") = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("scoped_for_decl") = "org.rust.lang.core.psi.impl.mixin.RustScopedForDeclImplMixin"

    implements  ("parameter")       = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("parameter")       = "org.rust.lang.core.psi.impl.mixin.RustParameterImplMixin"

    implements  ("match_pat")   = "org.rust.lang.core.psi.RustDeclaringElement"
    mixin       ("match_pat")   = "org.rust.lang.core.psi.impl.mixin.RustMatchPatImplMixin"

    implements  ("pat_binding") = [ "org.rust.lang.core.psi.RustDeclaringElement"
                                    "org.rust.lang.core.psi.RustNamedElement" ]
    mixin       ("pat_binding") = "org.rust.lang.core.psi.impl.mixin.RustPatBindingImplMixin"

    implements  ("type_param") = [ "org.rust.lang.core.psi.RustDeclaringElement"
                                   "org.rust.lang.core.psi.RustNamedElement" ]
    mixin       ("type_param") = "org.rust.lang.core.psi.impl.mixin.RustTypeParamImplMixin"

    //
    // GenericDeclarations
    //

    implements ("struct_item") = "org.rust.lang.core.psi.RustGenericDeclaration"
    implements ("trait_item")  = "org.rust.lang.core.psi.RustGenericDeclaration"
    implements ("impl_item")   = "org.rust.lang.core.psi.RustGenericDeclaration"

    //
    //  Misc
    //

    implements  ("alias") = "org.rust.lang.core.psi.RustNamedElement"
    extends     ("alias") = "org.rust.lang.core.psi.impl.RustNamedElementImpl"

    implements  ("self_argument") = [ "org.rust.lang.core.psi.RustNamedElement"
                                      "org.rust.lang.core.psi.RustDeclaringElement" ]
    mixin       ("self_argument") = "org.rust.lang.core.psi.impl.mixin.RustSelfArgumentImplMixin"

    implements  ("use_glob") = "org.rust.lang.core.psi.RustNamedElement"
    mixin       ("use_glob") = "org.rust.lang.core.psi.impl.mixin.RustUseGlobImplMixin"

    elementType (".*_bin_expr")   = binary_expr
    elementType (".*_range_expr") = range_expr

    extends           ("(?!meta_item)(?!foreign_item)(?!macro_item).*_item") = item_
    elementTypeFactory("(?!meta_item)(?!foreign_item)(?!macro_item).*_item") = "org.rust.lang.core.stubs.types.ElementFactoryKt.factory"
    stubClass         ("(?!meta_item)(?!foreign_item)(?!macro_item).*_item") = "org.rust.lang.core.stubs.RustItemStub"

    elementType ("(fn|anon|lambda|path)_parameter") = parameter
    elementType ("(fn|lambda|path)_parameters|method_parameters|method_decl_parameters") = parameters
    elementType ("(fn_type|foreign_fn)_parameters") = variadic_parameters

    extends     ("(if|while)_let_expr") = scoped_let_expr
    extends     (".*_expr") = expr
    extends     ("(?!ret_type).*_type") = type
    extends     ("pat_.*")  = pat
    extends     (".*_attr") = attr

    elementType ("expr_like_macro|item_like_macro") = macro
    extends     ("(try|format_like)_macro") = macro
    elementType (".*_macro_invocation|macro_rules_invocation") = macro_invocation

    generateTokens=false
    generateTokenAccessors=true

    // Fast method sometimes fails to report syntax errors,
    // override it where it matters
    consumeTokenMethod("type_ascription") = "consumeToken"
    consumeTokenMethod("inner_attrs_and_block") = "consumeToken"

    consumeTokenMethod(".*") = "consumeTokenFast"

    //recoverWhile = skip_until_eol_rec
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Root
///////////////////////////////////////////////////////////////////////////////////////////////////

file ::= [ SHEBANG_LINE ] inner_attr* docs_and_item*


///////////////////////////////////////////////////////////////////////////////////////////////////
// Attributes
///////////////////////////////////////////////////////////////////////////////////////////////////

fake attr ::= meta_item

inner_attr ::= '#' '!' '[' meta_item ']'

outer_attr ::= '#' '[' meta_item ']'

meta_item ::= IDENTIFIER [ '=' lit_expr | '(' [ <<comma_separated_list meta_item>> ] ')' ]


///////////////////////////////////////////////////////////////////////////////////////////////////
// Items
///////////////////////////////////////////////////////////////////////////////////////////////////

vis ::= PUB

private attrs_and_vis ::= outer_attr* vis?
private item_inner ::= stmt_item_group
                     | macro_item

//
// TODO(kudinkin): That's a hack to force GK to generate accessors
//                 for the items
//
// NOTA BENE: Naming is crucial
//
fake item_ ::= attrs_and_vis {
  implements  = [ "org.rust.lang.core.psi.RustDeclaringElement"
                  "org.rust.lang.core.psi.RustNamedElement"
                  "org.rust.lang.core.psi.RustVisibilityOwner"
                  "org.rust.lang.core.psi.RustOuterAttributeOwner" ]
  mixin       = "org.rust.lang.core.psi.impl.mixin.RustItemImplMixin"
  stubClass   = "org.rust.lang.core.stubs.RustItemStub"
}

upper item ::= << injectInto attrs_and_vis item_inner >> {
  elementType = item_
}

private docs_and_item ::= item <<bindDocComments>>

private stmt_item_group ::= static_item
                          | const_item
                          | type_item
                          | block_item_group
                          | view_item


private block_item_group ::= &(CONST? UNSAFE? extern_abi? FN) fn_item
                           | &(UNSAFE? TRAIT ) trait_item
                           | &(UNSAFE? IMPL  ) impl_item
                           | mod_decl_item
                           | mod_item
                           | foreign_mod_item
                           | struct_item
                           | enum_item


///////////////////////////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////////////////////////

// Parameters
// TODO: Maybe enforce @NotNull's in specific cases
fake parameter  ::= pat? type?

fn_parameter ::= pat type_ascription
lambda_parameter ::= pat type_ascription?
anon_parameter ::= [ restricted_pattern ':' ] type
path_parameter ::= type !'='

fake parameters          ::= self_argument? parameter*
fake variadic_parameters ::= self_argument? parameter* '...'? { extends = parameters }

fn_parameters          ::= '(' !',' [ <<comma_separated_list fn_parameter>> ] ')' { pin = 1 }
lambda_parameters      ::= '|' !',' [ <<comma_separated_list lambda_parameter>> ] '|'

method_parameters      ::= <<method_params_impl fn_parameter>>
method_decl_parameters ::= <<method_params_impl anon_parameter>>

foreign_fn_parameters  ::= <<variadic_params_impl fn_parameter>>
fn_type_parameters     ::= <<variadic_params_impl anon_parameter>>
path_parameters        ::= '(' [ <<comma_separated_list path_parameter>> ] ')' { pin = 1 }

private meta variadic_params_impl ::= '(' [ <<param>> (',' <<param>>)*  [',' '...'? ] ] ')' { pin = 1 }
private meta method_params_impl ::= '(' ( self_argument [ ',' [ <<comma_separated_list <<param>>>> ] ]
                                        | [ <<comma_separated_list <<param>>>> ] ) ')' { pin = 1 }

self_argument ::= [ '&' LIFETIME? ] MUT? SELF type_ascription?
private restricted_pattern ::= &( IDENTIFIER
                                | '_'
                                | '&' (IDENTIFIER | '_')
                                | '&&' (IDENTIFIER | '_')
                                | MUT IDENTIFIER
                                ) pat


private fn_header ::= CONST? UNSAFE? extern_abi? FN IDENTIFIER generic_params

extern_abi ::= EXTERN STRING_LITERAL?

ret_type ::= '->' (type | '!') { pin = 1 }

fn_item ::= fn_header fn_parameters ret_type? where_clause? inner_attrs_and_block {
  pin = fn_header
}

generic_params ::= generic_params_inner?

private generic_params_inner ::= '<' lifetimes [ ',' [ type_params ','? ] ] '>'
                               | '<'                   type_params ','?     '>'
                               | '<' '>'

lifetimes ::= lifetime_and_bounds (',' lifetime_and_bounds)*

private lifetime_and_bounds ::= LIFETIME lifetime_bounds?
private lifetime_bounds     ::= ':' LIFETIME ('+' LIFETIME)*

private type_params ::= type_param (',' type_param)*

type_param ::= IDENTIFIER type_param_bounds? [ '=' type ]

type_param_bounds ::= ':' [ type_param_bound_seq ]

private type_param_bound_seq        ::= polybound type_param_bound_seq_right
private type_param_bound_seq_right  ::= [ '+' polybound type_param_bound_seq_right ]

polybound ::= [ FOR '<' lifetimes? '>' | '?' ] bound

where_clause ::= WHERE <<comma_separated_list where_pred>>

where_pred ::= for_lifetimes? (LIFETIME ':' [ LIFETIME ( '+' LIFETIME )* ] | type type_param_bounds)

for_lifetimes ::= FOR '<' lifetimes '>'

pat ::= pat_wild
      | pat_reg
      | pat_tup
      | pat_vec
      | pat_macro
      | pat_struct
      | pat_enum
      | pat_ident
      | pat_range
      | pat_uniq
      | pat_qual_path
   /* | SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident */

pat_qual_path   ::= << qualified_path path_without_types >>
pat_uniq        ::= BOX pat

// XXX(matklad): it is impossible to distinguish between nullary enum variants
// and identifiers during parsing.
//
//   match x {
//       None => { } // match enum variant
//       Name => { } // bind Name to x
//   }
pat_ident       ::= pat_binding [ '@' pat ]


pat_struct      ::= path_expr '{' pat_struct_fields '}'
pat_enum        ::= path_expr '(' ( '..' | patterns ) ')'

pat_range ::= lit_or_path [ '...' lit_or_path ]

pat_tup ::= '(' patterns? ')'
pat_vec ::= '[' pat_vec_elts ']'

private patterns ::= <<comma_separated_list pat>>
private pat_vec_elts ::= patterns? [ '..' [ ',' patterns ] ]

pat_reg ::= '&' MUT? pat
          | '&&' pat

pat_wild ::= '_'
pat_binding ::= binding_mode? IDENTIFIER !'...' !'::'

private lit_or_path ::= path_expr | lit | '-' lit

generic_args ::= '<' !('=') generic_values '>' {
  pin = 2
}

private generic_values ::= lifetimes [ ',' type_sums_and_or_bindings ] ','?
                         |                 type_sums_and_or_bindings?

private type_sums_and_or_bindings ::=                                  bindings   ','?
                                    | type !'=' (',' type !'=')* [ ',' bindings ] ','?

bindings ::= binding (',' binding)*
binding  ::= IDENTIFIER '=' type

pat_struct_fields ::= (pat_field ',')+ '..'
                    | <<comma_separated_list pat_field>>
                    | '..'

pat_field ::= IDENTIFIER ':' pat
            | BOX? pat_binding

binding_mode ::= REF MUT? | MUT

private static_decl ::= IDENTIFIER type_ascription '=' any_expr

static_item ::= STATIC MUT? static_decl ';'
const_item ::= CONST static_decl ';'

private view_item ::= use_item
                    | extern_crate_item

use_item ::= USE use_path ';' { pin = 1 }

private use_path ::=
//  use ::{};
//  use {foo, bar};
  '::'? use_glob_list
//  use foo::bar as baz;
//  use foo::bar::{self, foo};
//  use foo::{};
//  use ::foo::*;
| path_without_types ( alias | '::' ( use_glob_list | '*' ) )?

use_glob_list ::= '{' [ <<comma_separated_list use_glob>> ] '}'
use_glob ::= (IDENTIFIER | SELF) alias?

alias ::= AS IDENTIFIER

extern_crate_item ::= EXTERN CRATE IDENTIFIER alias? ';'

///////////////////////////////////////////////////////////////////////////////////////////////////
// Mods
///////////////////////////////////////////////////////////////////////////////////////////////////

mod_decl_item ::= MOD IDENTIFIER ';'

mod_item ::= MOD IDENTIFIER '{' inner_attr* docs_and_item* '}' {
  pin(".*") = 3
}

foreign_mod_item ::= extern_abi '{' inner_attr* ( foreign_decl <<bindDocComments>> )* '}'

foreign_decl  ::= attrs_and_vis ( foreign_static_decl | foreign_fn_decl ) <<bindDocComments>> ';' {
  implements = [ "org.rust.lang.core.psi.RustOuterAttributeOwner"
                 "org.rust.lang.core.psi.RustVisibilityOwner" ]
}

foreign_static_decl ::= STATIC MUT? IDENTIFIER type_ascription
foreign_fn_decl ::= FN IDENTIFIER generic_params foreign_fn_parameters ret_type? where_clause?


///////////////////////////////////////////////////////////////////////////////////////////////////
// Struct
///////////////////////////////////////////////////////////////////////////////////////////////////

struct_item ::= STRUCT IDENTIFIER generic_params (struct_tuple_args? where_clause? ';' | where_clause? struct_decl_args)

struct_tuple_args ::= '(' <<comma_separated_list ( struct_tuple_field <<bindDocComments>> )>> ')' { pin = 1 }
struct_tuple_field ::= attrs_and_vis type {
  implements = [ "org.rust.lang.core.psi.RustOuterAttributeOwner"
                 "org.rust.lang.core.psi.RustVisibilityOwner" ]
}

struct_decl_args ::= '{' [ <<comma_separated_list ( struct_decl_field <<bindDocComments>> )>> ] '}' { pin = 1 }
struct_decl_field ::= attrs_and_vis IDENTIFIER type_ascription {
  pin = 2
  implements = [ "org.rust.lang.core.psi.RustOuterAttributeOwner"
                 "org.rust.lang.core.psi.RustVisibilityOwner" ]
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Enum
///////////////////////////////////////////////////////////////////////////////////////////////////

enum_item ::= ENUM IDENTIFIER generic_params where_clause? enum_body

enum_body ::= '{' [ <<comma_separated_list ( enum_variant <<bindDocComments>> )>> ] '}' { pin = 1 }
enum_variant ::= outer_attr* IDENTIFIER enum_args? {
  pin = 2
  implements = [ "org.rust.lang.core.psi.RustOuterAttributeOwner"
                 "org.rust.lang.core.psi.RustDeclaringElement"
                 "org.rust.lang.core.psi.RustNamedElement" ]
}

private enum_args ::= enum_struct_args
                    | enum_tuple_args
                    | enum_discriminant

// unlike real structs, enum variants can't have `pub` visibility applied to fields
enum_tuple_args ::= '(' <<comma_separated_list enum_tuple_field>> ')' { pin = 1 }
enum_tuple_field ::= outer_attr* type

enum_struct_args ::= '{' <<comma_separated_list enum_struct_field>> '}' { pin = 1 }
enum_struct_field ::= outer_attr* IDENTIFIER type_ascription { pin = 2 }

enum_discriminant ::= '=' any_expr { pin = 1 }


///////////////////////////////////////////////////////////////////////////////////////////////////
// Trait
///////////////////////////////////////////////////////////////////////////////////////////////////

trait_item ::= UNSAFE? TRAIT IDENTIFIER generic_params type_param_bounds? where_clause? trait_body
trait_body ::= '{' trait_member* '}' { pin = 1 }

// TODO: use upper rules and inheritance here
private trait_member ::= trait_const_member
                       | trait_type_member
                       | trait_method_member

trait_const_member ::= outer_attr* CONST IDENTIFIER type_ascription? const_default? ';'

private const_default ::= '=' any_expr

trait_type_member ::= outer_attr* TYPE_KW type_param ';'

trait_method_member ::= outer_attr* fn_header method_decl_parameters ret_type? where_clause? (';' | inner_attrs_and_block) {
  pin = fn_header
}


trait_ref ::= path_generic_args_without_colons


///////////////////////////////////////////////////////////////////////////////////////////////////
// Impl
///////////////////////////////////////////////////////////////////////////////////////////////////

impl_item ::= UNSAFE? IMPL generic_params type where_clause? impl_body
            | UNSAFE? IMPL generic_params '!'? trait_ref FOR (type where_clause? impl_body | '..' '{' '}') {
  pin(".*") = "'{'"
}

impl_body ::= '{' inner_attr* impl_member* '}' { pin = 1 }

// TODO: unify with trait_member?
private impl_member ::= impl_method_member <<bindDocComments>>
                      | impl_const_member <<bindDocComments>>
                      | impl_macro_member <<bindDocComments>>
                      | impl_type_member <<bindDocComments>>

impl_method_member ::= attrs_and_vis fn_header method_parameters ret_type? where_clause? inner_attrs_and_block {
  pin = fn_header
  implements = [ "org.rust.lang.core.psi.RustNamedElement"
                 "org.rust.lang.core.psi.RustOuterAttributeOwner"
                 "org.rust.lang.core.psi.RustInnerAttributeOwner"
                 "org.rust.lang.core.psi.RustVisibilityOwner"
                 "org.rust.lang.core.resolve.scope.RustResolveScope"
                 "org.rust.lang.core.psi.RustGenericDeclaration" ]
}

impl_const_member ::= attrs_and_vis CONST static_decl ';' {
  implements = [ "org.rust.lang.core.psi.RustOuterAttributeOwner"
                 "org.rust.lang.core.psi.RustVisibilityOwner" ]
}

impl_type_member ::= attrs_and_vis TYPE_KW IDENTIFIER generic_params '=' type ';' {
  implements = [ "org.rust.lang.core.psi.RustOuterAttributeOwner"
                 "org.rust.lang.core.psi.RustVisibilityOwner" ]
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////////////////////////////////////////

private type_ascription ::= ':' type

type ::= vec_type
       | ptr_type
       | ref_type
       | bare_fn_type
       | tuple_type
       | path_type
       | type_with_bounds_type
       | for_in_type
       | wildcard_type

vec_type ::= '[' type [';' any_expr] ']'

ptr_type ::= '*' [ MUT | CONST ] type

ref_type ::= ( '&' | '&&' ) [ LIFETIME? MUT? ] type

bare_fn_type ::= [ UNSAFE? extern_abi? ] FN fn_type_parameters ret_type?

tuple_type ::= '(' [ <<comma_separated_list type>> ] ')'

path_type ::= !'<' path_generic_args_without_colons
            | &'<' type_qual_path

type_with_bounds_type ::= type '+' bound ('+' bound)*
bound ::= LIFETIME | trait_ref

for_in_type ::= FOR '<' lifetimes? '>' (bare_fn_type | trait_ref)

wildcard_type ::= '_'


type_item ::= TYPE_KW IDENTIFIER generic_params where_clause? '=' type ';'

type_qual_path ::= << qualified_path path_without_types >>


///////////////////////////////////////////////////////////////////////////////////////////////////
// Paths
///////////////////////////////////////////////////////////////////////////////////////////////////


private full_path ::= path_leftish path*

path_leftish ::= '::'? (IDENTIFIER | SELF | SUPER | CSELF) path_generics? {
  elementType = path
}

//
// TODO(kudinkin, matklad):
//
//    In rustc parser, self/super are treated as identifiers only if immediately followed by `::`
//    Thus, these are valid paths:
//
//      `foo :: bar ::baz`
//      `self:: super::foo ::baz`
//
//  and these are invalid ones
//
//      `self ::foo::bar`
//      `self::super ::foo`
//
// We parse all the above paths as valid.
//
left path ::= '::' (IDENTIFIER | SELF | SUPER | CSELF) path_generics?

private path_generics ::= <<isPathModeColons>> '::' generic_args
                        | <<isPathModeNoColons>> ( generic_args | path_parameters ret_type? ) // Fn(i32) -> i32 sugar


// Paths (with `::` separating `generic_args` from actual name) used in expression contexts:
//    a::b::<T,U>::c
path_generic_args_without_colons ::= <<withPathModeNoColons full_path>> {
  elementType = path
  extends = path
}

// Paths (w/o types and therefore `generic_args`, containing only identifiers, `self`, etc.):
//    a::b::c
path_without_types ::= <<withPathModeNoTypes full_path>> {
  elementType = path
  extends = path
}

// Paths (w/o `::` separating `generic_args` from actual name) used in type contexts:
//    a::b<T,U>::c<V,W>
//    a::b<T,U>::c(V) -> W
//    a::b<T,U>::c(V)
path_generic_args_with_colons ::= <<withPathModeColons full_path>> {
  elementType = path
  extends = path
}

//
// Qualified paths
//
//    <TYPE [as TRAIT_REF]> :: (path_without_types | path_generic_args_without_colons | path_generic_args_with_colons)
//
//    <T>::c<V,W>
//    <T as Foo>::c(V) -> W
//
private meta qualified_path ::= '<' type [ AS trait_ref ] '>' '::' <<param>>


///////////////////////////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////////////////////////

// https://doc.rust-lang.org/reference.html#operator-precedence
// https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities
//
// Rust expression grammar allows or forbids struct literals depending on context.
// There are `no_struct_lit_expr` and `any_expr` productions for this two cases.
// `expr` production is an implementation detail. It passes the context information to the child expressions.
expr ::= ret_expr
       | assign_bin_expr
       | block_expr
       | cont_expr
       | break_expr
       | lambda_expr
       | full_range_expr
       | open_range_expr
       | bool_or_bin_expr
       | bool_and_bin_expr
       | comp_bin_expr
       | rel_comp_bin_expr
       | bit_or_bin_expr
       | bit_xor_bin_expr
       | bit_and_bin_expr
       | bit_shift_bin_expr
       | add_bin_expr
       | mul_bin_expr
       | cast_expr
       | unary_expr
       | try_expr
       | atom_expr

// https://github.com/rust-lang/rfcs/blob/master/text/0092-struct-grammar.md
private no_struct_lit_expr  ::= << withoutStructLiterals expr >> | never expr
private any_expr            ::= << withStructLiterals expr >>    | never expr
private never ::= !()


block_expr ::= while_expr
             | while_let_expr
             | if_expr
             | if_let_expr
             | for_expr
             | loop_expr
             | match_expr
             | (UNSAFE &'{')? block


private atom_expr ::= lit_expr
                    | macro_expr
                    | struct_expr
                    | qual_path_expr
                    | method_call_expr
                    | field_expr
                    | index_expr
                    | path_expr !'('
                    | call_expr
                    | array_expr
                    | unit_expr
                    | tuple_or_paren_expr


binary_expr ::= expr + {
  methods=[
    left="/expr[0]"
    right="/expr[1]"
  ]
}

assign_bin_expr ::= expr
                  ( gtgteq
                  | ltlteq
                  | '|='
                  | '^='
                  | '&='
                  | '='
                  | '+='
                  | '-='
                  | '*='
                  | '/='
                  | '%='
                  ) expr    { rightAssociative = true }

comp_bin_expr       ::= expr ('==' | '!=') expr
rel_comp_bin_expr   ::= expr ('<' !('<' | '=') | '>' !('>' | '=') | lteq | gteq) expr
bit_shift_bin_expr  ::= expr (ltlt | gtgt) expr
add_bin_expr        ::= expr ('+' | '-') expr
mul_bin_expr        ::= expr ('*' | '/' | '%') expr

// <expr> | <expr> has higher priority than <expr> || <expr>
bool_or_bin_expr    ::= expr oror expr
bool_and_bin_expr   ::= expr '&&' expr
bit_or_bin_expr     ::= expr '|' !'|' expr
bit_xor_bin_expr    ::= expr '^' expr
bit_and_bin_expr    ::= expr '&' expr


cast_expr ::= expr AS type

try_expr ::= expr '?'

unary_expr ::= (BOX | '-' | '*' | '!' | ('&' | '&&') MUT?) expr

lambda_expr ::= MOVE? lambda_parameters ret_type? any_expr

struct_expr ::= << checkStructAllowed >> path_generic_args_with_colons struct_expr_body

struct_expr_body ::= '{'
                       [ <<comma_separated_list (IDENTIFIER ':' any_expr)>> ]
                       ('..'  any_expr)?
                     '}'

path_expr ::= path_generic_args_with_colons

qual_path_expr ::= << qualified_path path_generic_args_with_colons >>

while_expr ::= [ LIFETIME ':' ] WHILE no_struct_lit_expr block

loop_expr ::= [ LIFETIME ':' ] LOOP block
cont_expr ::= CONTINUE LIFETIME?

break_expr ::= BREAK LIFETIME?

scoped_for_decl ::= pat IN no_struct_lit_expr

for_expr ::= [ LIFETIME ':' ] FOR scoped_for_decl block { pin = "IN" }

match_expr ::= MATCH no_struct_lit_expr match_body
match_body ::= '{' match_arm* '}' { pin = 1 }
match_arm ::= outer_attr* match_pat '=>' (block_expr !('.' | '?') ','? | any_expr (',' | &'}'))
match_pat ::= pat ('|' pat)* (IF any_expr)?

if_expr ::= IF no_struct_lit_expr block else_tail?

private else_tail ::= ELSE (if_expr | if_let_expr | block )

fake scoped_let_expr ::= scoped_let_decl block

scoped_let_decl ::= LET pat '=' no_struct_lit_expr

if_let_expr ::= IF scoped_let_decl block else_tail?

while_let_expr ::= WHILE scoped_let_decl block

ret_expr ::= RETURN expr?

unit_expr ::= '(' ')'

// It is possible to distinguish between paren_expr (any_expr) and a single element
// tuple_expr (any_expr,) only after almost all input has been consumed. That is, it's
// not LL(k) for any k. So let's use a custom rule to avoid exponential backtracking.
tuple_or_paren_expr ::= << tupleOrParenExpr any_expr tuple_expr_end paren_expr_end >>

// Used by `tupleOrParenExpr`
tuple_expr ::= '(' any_expr tuple_expr_end
private tuple_expr_end ::= ',' [ any_expr (',' any_expr)* ','? ] ')'

// Used by `tupleOrParenExpr`
paren_expr ::= '(' any_expr paren_expr_end
private paren_expr_end ::= ')'

array_expr ::= '[' array_elems? ']' { pin = 1 }

private array_elems ::= any_expr ';' any_expr
                      | expr_list


//private range_expr_group ::= open_range_expr
//                           | full_range_expr

full_range_expr ::= expr '..' (&<<checkBraceAllowed>> expr)?
open_range_expr ::=      '..' (&<<checkBraceAllowed>> expr)?

range_expr ::= expr + {
  methods=[
    from="/expr[0]"
    to="/expr[1]"
  ]
}


index_expr ::= expr index_arg
// Do not inline this rule, it breaks expression parsing
private index_arg ::= '[' expr ']'

call_expr ::= expr arg_list

method_call_expr ::= expr '.' IDENTIFIER [ '::' generic_args ] arg_list { pin = 2 }

arg_list ::= '(' expr_list? ')' { pin = 1 }

private expr_list ::= <<comma_separated_list any_expr>>

field_expr ::= expr '.' (IDENTIFIER | INTEGER_LITERAL) { pin(".*") = 2 }

lit_expr ::= lit


///////////////////////////////////////////////////////////////////////////////////////////////////
// Macros
///////////////////////////////////////////////////////////////////////////////////////////////////

fake macro ::= macro_invocation macro_arg?

// Various kinds of macros
expr_like_macro ::= macro_invocation macro_arg
item_like_macro ::= macro_invocation item_macro_arg

try_macro ::= try_macro_invocation try_macro_args { pin = 1 }
format_like_macro ::= format_like_macro_invocation format_macro_args { pin = 1 }

macro_definition ::= macro_rules_invocation IDENTIFIER item_macro_arg {
  pin = 1
  extends = item_like_macro
}

private build_in_macro ::= try_macro
                         | format_like_macro

private zz_macro_call ::= build_in_macro | expr_like_macro { pin(".*") = macro_invocation }
private zz_macro_item ::= macro_definition | item_like_macro { pin(".*") = macro_invocation }

// Invocations
macro_invocation ::= IDENTIFIER '!'
try_macro_invocation ::= "try" '!'
macro_rules_invocation ::= "macro_rules" '!'

// https://doc.rust-lang.org/std/fmt/
format_like_macro_invocation ::= ( "format"
                                 | "format_args"
                                 | "write"
                                 | "writeln"
                                 | "print"
                                 | "println"
                                 // logging macros from the log crate
                                 | "debug"
                                 | "error"
                                 | "info"
                                 | "log"
                                 | "trace"
                                 | "warn" ) '!'

// Arguments
macro_arg ::= <<macro_args_delim token_trees>>

item_macro_arg ::= '(' token_trees ')' ';'
                 | '{' token_trees '}'
                 | '[' token_trees ']' ';' {
  pin = 1
  elementType = macro_arg
}

try_macro_args ::= <<macro_args_delim any_expr>>

format_macro_args ::= <<macro_args_delim [ <<comma_separated_list format_macro_arg>> ] >>
format_macro_arg ::= [ IDENTIFIER '=' ] any_expr

private meta macro_args_delim ::= '(' <<param>> ')'
                                | '{' <<param>> '}'
                                | '[' <<param>> ']' { pin = 1 }

// Macro wrappers
macro_expr ::= zz_macro_call
pat_macro  ::= zz_macro_call
// TODO: Maybe implement item-related stuff for this production?
macro_item ::= zz_macro_item
impl_macro_member ::= zz_macro_item

// Utils
private token_trees ::= token_tree*

token_tree ::= '(' token_trees ')'
             | '{' token_trees '}'
             | '[' token_trees ']'
             | << unpairedToken >> +


///////////////////////////////////////////////////////////////////////////////////////////////////
// Literals
///////////////////////////////////////////////////////////////////////////////////////////////////

private lit ::= ( STRING_LITERAL
                | CHAR_LITERAL
                | BYTE_STRING_LITERAL
                | BYTE_LITERAL
                | RAW_STRING_LITERAL
                | RAW_BYTE_STRING_LITERAL
                | INTEGER_LITERAL
                | FLOAT_LITERAL
                | bool_lit )

private bool_lit ::= FALSE | TRUE


///////////////////////////////////////////////////////////////////////////////////////////////////
// Statements
///////////////////////////////////////////////////////////////////////////////////////////////////

block ::= '{' (never inner_attr*)? block_tail '}' {
  pin = 1
}

inner_attrs_and_block ::= '{' inner_attr* block_tail '}' {
  elementType = block
  pin = 1
}

private block_tail ::= (stmt | docs_and_item)* any_expr?

stmt ::= expr_stmt | let_decl | empty_stmt

expr_stmt ::= outer_attr? ( block_expr !('.' | '?') ';'? | any_expr ';' ) {
  extends = stmt
}

let_decl ::= outer_attr? LET pat type_ascription? [ '=' any_expr ] ';' {
  extends = stmt
  pin = "LET"
}

empty_stmt ::= ';' {
  extends = stmt
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Utils
///////////////////////////////////////////////////////////////////////////////////////////////////

private gtgteq ::= <<collapse GTGTEQ GT GT EQ>> | never GTGTEQ { name = ">>=" }
private gtgt   ::= <<collapse GTGT   GT GT>>    | never GTGT   { name = ">>" }
private gteq   ::= <<collapse GTEQ   GT EQ>>    | never GTEQ   { name = ">=" }
private ltlteq ::= <<collapse LTLTEQ LT LT EQ>> | never LTLTEQ { name = "<<=" }
private ltlt   ::= <<collapse LTLT   LT LT>>    | never LTLT   { name = "<<" }
private lteq   ::= <<collapse LTEQ   LT EQ>>    | never LTEQ   { name = "<=" }
private oror   ::= <<collapse OROR   OR OR>>    | never OROR   { name = "||" }

// Trailing commas are allowed
private meta comma_separated_list ::= <<param>> ( ',' <<param>> )* ','?

private skip_until_eol_rec ::= !(<< skipUntilEOL >>)
